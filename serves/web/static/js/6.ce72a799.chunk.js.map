{"version":3,"sources":["containers/editGoods/index.js"],"names":["Header","Content","Sider","editGoods","antd_es_form__WEBPACK_IMPORTED_MODULE_24__","create","name","props","Object","_Users_cengfucheng_WebstormProjects_react_react_cli_3_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_18__","this","_Users_cengfucheng_WebstormProjects_react_react_cli_3_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_20__","_Users_cengfucheng_WebstormProjects_react_react_cli_3_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_21__","call","getFieldDecorator","form","react__WEBPACK_IMPORTED_MODULE_28___default","a","createElement","antd_es_layout__WEBPACK_IMPORTED_MODULE_27__","labelCol","xs","span","sm","wrapperCol","style","background","Item","label","rules","required","message","antd_es_input__WEBPACK_IMPORTED_MODULE_16__","placeholder","messag","padding","antd_es_checkbox__WEBPACK_IMPORTED_MODULE_1__","Group","options","value","defaultValue","width","EditableTable","margin","display","border","Avatar","nameType","Component","EditableContext","React","createContext","EditableFormRow","_ref","index","_Users_cengfucheng_WebstormProjects_react_react_cli_3_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_25__","Provider","EditableCell","state","editing","toggleEdit","_this","setState","input","focus","save","e","_this$props","record","handleSave","validateFields","error","values","currentTarget","id","_Users_cengfucheng_WebstormProjects_react_react_cli_3_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_17__","renderCell","_this$props2","children","dataIndex","title","concat","initialValue","ref","node","onPressEnter","onBlur","className","paddingRight","onClick","_this$props3","editable","restProps","Consumer","_this2","handleDelete","key","dataSource","_Users_cengfucheng_WebstormProjects_react_react_cli_3_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_14__","filter","item","handleAdd","_this2$state","count","newData","attribute","shopMoney","goodsNum","row","findIndex","splice","columns","render","text","length","antd_es_popconfirm__WEBPACK_IMPORTED_MODULE_13__","onConfirm","href","_this3","components","body","cell","map","col","onCell","antd_es_button__WEBPACK_IMPORTED_MODULE_11__","type","marginBottom","antd_es_table__WEBPACK_IMPORTED_MODULE_9__","rowClassName","bordered","beforeUpload","file","isJPG","antd_es_message__WEBPACK_IMPORTED_MODULE_7__","isLt2M","size","loading","handleChange","info","status","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","getBase64","originFileObj","imageUrl","_this4","uploadButton","antd_es_icon__WEBPACK_IMPORTED_MODULE_5__","antd_es_upload__WEBPACK_IMPORTED_MODULE_3__","listType","showUploadList","action","onChange","src","alt"],"mappings":"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","file":"static/js/6.ce72a799.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Form, Input, Layout, Checkbox, Button } from 'antd';\nimport { Table, Popconfirm} from 'antd';        // 表格\nimport { Upload, Icon, Modal, message } from 'antd'; // 上传图片\nimport propTypes from \"prop-types\";\n\nconst { Header, Sider, Content } = Layout;\n\nexport default\n@Form.create({name: 'edit_shop'})\nclass editGoods extends Component{\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 3 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n        };\n\n        let brandOptions = [\n            { label: '选项一', value: '选项一' },\n            { label: '选项二', value: '选项二' },\n            { label: '选项三', value: '选项三' },\n        ];\n\n        let colorOptions = [\n            { label: '选项一', value: '选项一' },\n            { label: '选项二', value: '选项二' },\n            { label: '选项三', value: '选项三' },\n        ];\n\n        return (\n            <Layout>\n                <Form {...formItemLayout}>\n                    <Layout>\n                        <Header style={{background: 'white'}}>\n                            <span>基本信息</span>\n                        </Header>\n                        <Content>\n                            <Form.Item label='商品名称'>\n                                {getFieldDecorator('gondsName', {\n                                    rules: [\n                                        {\n                                            required: true,\n                                            message: '请输入商品名称'\n                                        }\n                                    ]\n                                })(\n                                    <Input placeholder='请输入商品名称'/>\n                                )}\n                            </Form.Item>\n                            <Form.Item label='商品单位'>\n                                {getFieldDecorator('goodsUnit', {\n                                    rules: [\n                                        {\n                                            required: true,\n                                            message: '请输入商品单位'\n                                        }\n                                    ]\n                                })(\n                                    <Input placeholder='单位'/>\n                                )}\n                            </Form.Item>\n                            <Form.Item label='库存'>\n                                {getFieldDecorator('goodNum',{\n                                    rules: [\n                                        {\n                                            required: true,\n                                            messag: '请输入商品库存'\n                                        }\n                                    ]\n                                })(\n                                    <Input placeholder='库存数'/>\n                                )}\n                            </Form.Item>\n                            <Form.Item label='商家'>\n                                <p>商家</p>\n                            </Form.Item>\n                            <Form.Item label='商品货号'>\n                                <p>123456789</p>\n                            </Form.Item>\n                        </Content>\n                    </Layout>\n\n                    <Layout>\n                        <Header style={{background: 'white'}}>\n                            <span>属性设置</span>\n                        </Header>\n                        <Content>\n                            <div style={{padding: '0 0 0 7%'}}>\n                                <Form.Item>\n                                    <span>品牌: </span>\n                                    <Checkbox.Group options={brandOptions} defaultValue={['选项一']}/>\n                                </Form.Item>\n                                <Form.Item>\n                                    <span>颜色: </span>\n                                    <Checkbox.Group options={colorOptions} defaultValue={['选项一']}/>\n                                </Form.Item>\n                            </div>\n                            <div style={{padding: '0 0 0 7%', width: '72%'}}>\n                                <EditableTable/>\n                            </div>\n\n                        </Content>\n                    </Layout>\n\n                    <Layout>\n                        <Header style={{background: 'white'}}>\n                            <span>图片管理</span>\n                        </Header>\n                        <Content>\n                            <div style={{margin: '10px 6%', padding: '10px',\n                                        display: 'inline-block',\n                                        border: '1px solid #ccc'}}>\n                                <div  style={{display: 'inline-block'}}>\n                                    <Avatar nameType='主图'/>\n                                </div>\n                                <div  style={{display: 'inline-block'}}>\n                                    <Avatar nameType='次图'/>\n                                </div>\n                                <div  style={{display: 'inline-block'}}>\n                                    <Avatar nameType='次图'/>\n                                </div>\n                                <div  style={{display: 'inline-block'}}>\n                                    <Avatar nameType='次图'/>\n                                </div>\n                                <div  style={{display: 'inline-block'}}>\n                                    <Avatar nameType='次图'/>\n                                </div>\n                            </div>\n                        </Content>\n                    </Layout>\n                </Form>\n            </Layout>\n        )\n    }\n}\n\n\n\n// 表格\nconst EditableContext = React.createContext();\nconst EditableRow = ({ form, index, ...props }) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\nconst EditableFormRow = Form.create()(EditableRow);\nclass EditableCell extends React.Component {\n    state = {\n        editing: false,\n    };\n\n    toggleEdit = () => {\n        const editing = !this.state.editing;\n        this.setState({ editing }, () => {\n            if (editing) {\n                this.input.focus();\n            }\n        });\n    };\n\n    save = e => {\n        const { record, handleSave } = this.props;\n        this.form.validateFields((error, values) => {\n            if (error && error[e.currentTarget.id]) {\n                return;\n            }\n            this.toggleEdit();\n            handleSave({ ...record, ...values });\n        });\n    };\n\n    renderCell = form => {\n        this.form = form;\n        const { children, dataIndex, record, title } = this.props;\n        const { editing } = this.state;\n        return editing ? (\n            <Form.Item style={{ margin: 0 }}>\n                {form.getFieldDecorator(dataIndex, {\n                    rules: [\n                        {\n                            required: true,\n                            message: `${title} is required.`,\n                        },\n                    ],\n                    initialValue: record[dataIndex],\n                })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{ paddingRight: 24 }}\n                onClick={this.toggleEdit}\n            >\n                {children}\n            </div>\n        );\n    };\n\n    render() {\n        const {\n            editable,\n            dataIndex,\n            title,\n            record,\n            index,\n            handleSave,\n            children,\n            ...restProps\n        } = this.props;\n        return (\n            <td {...restProps}>\n                {editable ? (\n                    <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n                ) : (\n                    children\n                )}\n            </td>\n        );\n    }\n}\n\nclass EditableTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.columns = [\n            {\n                title: '属性',\n                dataIndex: 'attribute',\n                width: '30%',\n            },\n            {\n                title: '销售价',\n                dataIndex: 'shopMoney',\n                editable: true,\n            },\n            {\n                title: '商品编号',\n                dataIndex: 'goodsNum',\n            },\n            {\n                title: '操作',\n                dataIndex: '4',\n                render: (text, record) =>\n                    this.state.dataSource.length >= 1 ? (\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\n                            <a href=\"javascript:;\">删除</a>\n                        </Popconfirm>\n                    ) : null,\n            },\n        ];\n\n        this.state = {\n            dataSource: [\n                {\n                    key: '0',\n                    attribute: '很好',\n                    shopMoney: '32',\n                    goodsNum: '123456789',\n                },\n                {\n                    key: '1',\n                    attribute: '好',\n                    shopMoney: '32',\n                    goodsNum: '123456789',\n                },\n            ],\n            count: 2,\n        };\n    }\n\n    handleDelete = key => {\n        const dataSource = [...this.state.dataSource];\n        this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n    };\n\n    handleAdd = () => {\n        const { count, dataSource } = this.state;\n        const newData = {\n            key: count,\n            attribute: `好 ${count}`,\n            shopMoney: 32,\n            goodsNum: `123456789. ${count}`,\n        };\n        this.setState({\n            dataSource: [...dataSource, newData],\n            count: count + 1,\n        });\n    };\n\n    handleSave = row => {\n        const newData = [...this.state.dataSource];\n        const index = newData.findIndex(item => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        this.setState({ dataSource: newData });\n    };\n\n    render() {\n        const { dataSource } = this.state;\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCell,\n            },\n        };\n        const columns = this.columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editable: col.editable,\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    handleSave: this.handleSave,\n                }),\n            };\n        });\n        return (\n            <div>\n                <Button onClick={this.handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n                    Add a row\n                </Button>\n                <Table\n                    components={components}\n                    rowClassName={() => 'editable-row'}\n                    bordered\n                    dataSource={dataSource}\n                    columns={columns}\n                />\n            </div>\n        );\n    }\n}\n\n\n// 上传图片\nfunction getBase64(img, callback) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n    const isJPG = file.type === 'image/jpeg';\n    if (!isJPG) {\n        message.error('You can only upload JPG file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n        message.error('Image must smaller than 2MB!');\n    }\n    return isJPG && isLt2M;\n}\n\nclass Avatar extends React.Component {\n    state = {\n        loading: false,\n    };\n\n    static propTypes = {\n        nameType: propTypes.string,\n    }\n\n    handleChange = info => {\n        if (info.file.status === 'uploading') {\n            this.setState({ loading: true });\n            return;\n        }\n        if (info.file.status === 'done') {\n            // Get this url from response in real world.\n            getBase64(info.file.originFileObj, imageUrl =>\n                this.setState({\n                    imageUrl,\n                    loading: false,\n                }),\n            );\n        }\n    };\n\n    render() {\n        let { props } = this;\n        const uploadButton = (\n            <div>\n                <Icon type={this.state.loading ? 'loading' : 'plus'} />\n                <div className=\"ant-upload-text\">{props.nameType}</div>\n            </div>\n        );\n        const imageUrl = this.state.imageUrl;\n        return (\n            <Upload\n                name=\"avatar\"\n                listType=\"picture-card\"\n                className=\"avatar-uploader\"\n                showUploadList={false}\n                action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n                beforeUpload={beforeUpload}\n                onChange={this.handleChange}\n            >\n                {imageUrl ? <img src={imageUrl} alt=\"avatar\" /> : uploadButton}\n            </Upload>\n        );\n    }\n}"],"sourceRoot":""}